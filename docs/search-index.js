var searchIndex = JSON.parse('{\
"reader_for_microxml":{"doc":"reader for microXmlreader for microXml - the simplified…","i":[[3,"PosChar","reader_for_microxml","",null,null],[12,"pos","","",0,null],[12,"ch","","",0,null],[3,"ReaderForMicroXml","","struct Reader for MicroXml - the Class Rust has Structs +…",null,null],[12,"input","","reference to the xml string (no allocation)",1,null],[12,"indices","","Iterator CharIndices over the input string",1,null],[12,"tag_state","","I need to know the TagState for programming as a state…",1,null],[12,"last_char","","the last read character from the indices iterator",1,null],[12,"start_of_text_node_before_whitespace","","for significant whitespace (in TextNode beginning)",1,null],[4,"Token","","The reader_for_microxml returns tokens. The caller will…",null,null],[13,"StartElement","","Start of xml element  ",2,null],[13,"EndElement","","End of xml element  ",2,null],[13,"Attribute","","Attribute  ",2,null],[13,"TextNode","","Text node between `StartElement` and `EndElement`.  ",2,null],[13,"Comment","","comment node",2,null],[4,"TagState","","internal enum: Tags are strings inside delimiters `< and >…",null,null],[13,"OutsideOfTag","","outside of tag  ",3,null],[13,"InsideOfTag","","inside of tag  ",3,null],[13,"EndOfFile","","reached normal end of file",3,null],[11,"set","","",0,[[]]],[11,"new","","Constructor. String is immutably borrowed here. No…",1,[[],["readerformicroxml",3]]],[11,"read_token_internal","","Reads the next token (internal). The internal function can…",1,[[],[["result",4],["option",4]]]],[11,"read_element_name","","Reads the element name Propagation of Option None if is…",1,[[],[["result",4],["option",4]]]],[11,"read_attribute","","Reads the attribute name and value. Return Option None if…",1,[[],[["result",4],["option",4]]]],[11,"read_end_element","","reads end element  ",1,[[],[["result",4],["option",4]]]],[11,"read_text_node","","Reads text node I don\'t do any encoding/decoding here,…",1,[[],[["result",4],["option",4]]]],[11,"read_comment","","Comments are not data for MicroXml standard, But I need…",1,[[],[["result",4],["option",4]]]],[11,"move_next_char","","Moves the iterator and stores the last_char. Iterator…",1,[[],["option",4]]],[11,"move_over_whitespaces","","Skips all whitespaces if there is any and returns the…",1,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"into_iter","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"next","","Reads the next token: StartElement, Attribute, Text,…",1,[[],[["result",4],["option",4]]]],[11,"clone","","",2,[[],["token",4]]]],"p":[[3,"PosChar"],[3,"ReaderForMicroXml"],[4,"Token"],[4,"TagState"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);